<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WebSocket on Euraxluo Blog</title>
    <link>https://euraxluo.github.io/series/websocket/</link>
    <description>Recent content in WebSocket on Euraxluo Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2016-{year} Euraxluo. All Rights Reserved.</copyright>
    <lastBuildDate>Thu, 22 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://euraxluo.github.io/series/websocket/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WebSocket</title>
      <link>https://euraxluo.github.io/posts/java/websocket/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://euraxluo.github.io/posts/java/websocket/</guid>
      <description>WebSocket 一、概念 1.WebSocket 是HTTP协议的补充。使用的TCP协议建立连接
2.HTML5是指一系列新API，新协议，WebSocket也是其中之一
二、优点 1.WebSocket是持久化协议，每次通信只需要一次连接
2.HTTP中一个request只能有一个response
3.连接过程：进行握手时，使用http协议对服务器发起连接请求，并且升级为websocket协议，确定后服务器建立连接，并且继续使用Websocket
三、作用 1.实现实时信息传递的其他方式
​	(1).ajax轮询：让浏览器隔个几秒就发送一次请求，询问服务器是否有新信息
​	(2).HTTP long poll：客户端发起连接后，如果没消息，就一直不返回Response给客户端。直到有消息才返回，返回完之后，客户端再次建立连接，周而复始。
​	(3).缺点：
​	ajax轮询：需要服务器有很快的处理速度和资源。（速度）
​	long poll：需要有很高的并发，也就是说同时接待客户的能力。（资源大小）
2.服务器完成协议升级后（HTTP-&amp;gt;Websocket），服务端就可以主动推送信息给客户端啦
3.整个通讯过程是建立在一次连接/状态中，避免了HTTP的非状态性，服务端会一直知道你的信息，直到你关闭请求
四、特点 1.建立在 TCP 协议之上，服务器端的实现比较容易。
2.与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。
3.数据格式比较轻量，性能开销小，通信高效。
4.可以发送文本，也可以发送二进制数据。
5.没有同源限制，客户端可以与任意服务器通信。
6.协议标识符是ws（如果加密，则为wss），服务器网址就是 URL。
五、客户端 1.创建WebSocket对象： var Socket = new WebSocket(url,[protocol])
url = 服务器地址，protocol是可接受的子协议
2.属性： (1)Socket.readyState//表示连接状态：0：尚未连接，1：已经连接，2：连接正在关闭，3：连接已经关闭，或不能打开。
(2)Socket.buffererdAmount//表示send()放在队列正在队列中等待传输
3.事件： | 对象触发的程序 | 描述 |
| &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; |
| Socket.onopen | 连接建立时触发 |</description>
    </item>
    
  </channel>
</rss>
