<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>缓存 on Euraxluo Blog</title>
    <link>https://euraxluo.gitee.io/blog/series/%E7%BC%93%E5%AD%98/</link>
    <description>Recent content in 缓存 on Euraxluo Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2016-{year} Euraxluo. All Rights Reserved.</copyright>
    <lastBuildDate>Thu, 22 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://euraxluo.gitee.io/blog/series/%E7%BC%93%E5%AD%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>缓存的使用和设计</title>
      <link>https://euraxluo.gitee.io/blog/posts/redis/%E7%BC%93%E5%AD%98%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://euraxluo.gitee.io/blog/posts/redis/%E7%BC%93%E5%AD%98%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E8%AE%BE%E8%AE%A1/</guid>
      <description>缓存的使用和设计 缓存的收益与成本 收益   加速读写
 通过缓存加速读写：CPU L1/L2/L3 Cache，浏览器缓存，Ehcache缓存数据库结果    降低后端负载
 后端服务器通过前端缓存降低负载：业务端使用Redis降低后端MySQL负载    成本   数据不一致
 缓存层和数据层有时间窗口不一致，和更新策略有关    代码维护成本：多了一层缓存逻辑
  运维成本：Redis Cluster
  使用场景   降低后端负载
 用于高消耗的SQL：join结果集/分组统计结果    加速请求响应
 利用Redis/Memcache优化IO时间    大量写合并为批量写
 计数器线Redis累加再批量更新到后端数据库    缓存更新策略   LRU/LFU/FIFO算法剔除：例如maxmemory-policy
  超时剔除：例如expire
  主动更新：开发控制生命周期
   推荐结合剔除，超时，主动更新三种方案完成  三种策略比较 | 策略 | 一致性 | 维护成本 |</description>
    </item>
    
  </channel>
</rss>
