<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MyBatis on Euraxluo Blog</title>
    <link>https://euraxluo.github.io/tags/mybatis/</link>
    <description>Recent content in MyBatis on Euraxluo Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2016-{year} Euraxluo. All Rights Reserved.</copyright>
    <lastBuildDate>Mon, 29 Oct 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://euraxluo.github.io/tags/mybatis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MyBatis</title>
      <link>https://euraxluo.github.io/posts/java/mbatis%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://euraxluo.github.io/posts/java/mbatis%E5%9F%BA%E7%A1%80/</guid>
      <description>MyBatis   一个ORM框架,(不直接建立java对象到关系数据库表数据的映射,而是建立对对象的操作方法到SQL的映射)支持自定义SQL,存储过程和高级映射的持久化框架
  使用XML或者注解配置
  能够映射基本数据元素,接口,Java对象到数据库
  ORM(Object/Relation Mapping) 作用:持久化类与数据库表之间的映射关系,让我们对持久化对象的操作自动转换成对关系数据库操作
通过映射,我们把关系数据库中的每一行都映射为对象,数据库的每一列就映射成了对象的属性
##　三层架构：
１.	接口层(数据查询接口,数据新增接口,数据更新接口,数据删除接口,获取配置接口)
２.	数据处理层(参数映射,SQL解析,SQL执行,结果映射)
３.	基础支撑层(连接管理，事务管理，配置加载，缓存处理)
工作流机制:   根据XM(xml中定义了连接的地址,以及对象和SQL的映射和关系)L或者注解加载SQL语句,参数映射,结果映射到内存
  应用程序调用API传入参数和SQL ID
  MyBatis 自动生成SQL语句完成数据库访问,转换执行结构返回应用程序
  例如,完成一个数据库查询  加载配置文件   应用配置文件
  关联映射文件
 sqlSession   生成SqlSessionFactory
  获取SqlSession
 执行查询   Session 执行SQL
 </description>
    </item>
    
  </channel>
</rss>
